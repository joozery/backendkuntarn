const { query } = require('../db/db');

async function checkCheckersTable() {
  try {
    console.log('ЁЯФН р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ checkers table...\n');
    
    // Check if table exists
    console.log('1. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓ checkers table р╕бр╕╡р╕нр╕вр╕╣р╣Ир╕лр╕гр╕╖р╕нр╣Др╕бр╣И...');
    try {
      const tableCheck = await query('SHOW TABLES LIKE "checkers"');
      if (tableCheck.length > 0) {
        console.log('тЬЕ checkers table р╕бр╕╡р╕нр╕вр╕╣р╣И');
      } else {
        console.log('тЭМ checkers table р╣Др╕бр╣Ир╕бр╕╡р╕нр╕вр╕╣р╣И');
        return;
      }
    } catch (error) {
      console.log('тЭМ Error checking table:', error.message);
      return;
    }
    
    // Check table structure
    console.log('\n2. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╕Вр╕нр╕З checkers table...');
    try {
      const structure = await query('DESCRIBE checkers');
      console.log('тЬЕ р╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕З table:');
      structure.forEach(col => {
        console.log(`   - ${col.Field}: ${col.Type} ${col.Null === 'YES' ? '(NULL)' : '(NOT NULL)'}`);
      });
    } catch (error) {
      console.log('тЭМ Error checking structure:', error.message);
    }
    
    // Check data count
    console.log('\n3. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Ир╕│р╕Щр╕зр╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕Щ checkers table...');
    try {
      const countResult = await query('SELECT COUNT(*) as count FROM checkers');
      const count = countResult[0].count;
      console.log(`тЬЕ р╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕е ${count} р╕гр╕▓р╕вр╕Бр╕▓р╕г`);
      
      if (count > 0) {
        // Show sample data
        console.log('\n4. р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕З:');
        const sampleData = await query('SELECT * FROM checkers LIMIT 3');
        sampleData.forEach((row, index) => {
          console.log(`   ${index + 1}. ${row.full_name} (${row.phone}) - ${row.status}`);
        });
      } else {
        console.log('тЪая╕П  р╣Др╕бр╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕Щ checkers table');
      }
    } catch (error) {
      console.log('тЭМ Error checking data:', error.message);
    }
    
    // Test API endpoint
    console.log('\n5. р╕Чр╕Фр╕кр╕нр╕Ъ API endpoint...');
    try {
      const apiTest = await query(`
        SELECT 
          c.id,
          c.name,
          c.surname,
          c.full_name as fullName,
          c.phone,
          c.email,
          c.status,
          c.branch_id as branchId,
          c.created_at as createdAt,
          c.updated_at as updatedAt,
          b.name as branchName
        FROM checkers c
        LEFT JOIN branches b ON c.branch_id = b.id
        WHERE c.branch_id = 1
        ORDER BY c.created_at DESC
      `);
      
      console.log(`тЬЕ API query р╕кр╕│р╣Ар╕гр╣Зр╕И - р╣Др╕Фр╣Йр╕Вр╣Йр╕нр╕бр╕╣р╕е ${apiTest.length} р╕гр╕▓р╕вр╕Бр╕▓р╕г`);
      if (apiTest.length > 0) {
        console.log('   р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е API:');
        apiTest.slice(0, 2).forEach((row, index) => {
          console.log(`   ${index + 1}. ${row.fullName} (${row.phone}) - ${row.branchName}`);
        });
      }
    } catch (error) {
      console.log('тЭМ Error testing API:', error.message);
    }
    
  } catch (error) {
    console.error('тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ:', error);
  }
}

// Run the function
checkCheckersTable()
  .then(() => {
    console.log('\nЁЯОЙ р╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\nтЭМ р╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕ер╣Йр╕бр╣Ар╕лр╕ер╕з:', error);
    process.exit(1);
  }); 