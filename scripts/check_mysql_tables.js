const { query } = require('../db/db');

async function checkMySQLTables() {
  console.log('ЁЯФН р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Table MySQL р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф...\n');

  try {
    // 1. р╕Фр╕╣р╕гр╕▓р╕вр╕Кр╕╖р╣Ир╕н tables р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф
    console.log('1. р╕гр╕▓р╕вр╕Кр╕╖р╣Ир╕н Tables р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф:');
    const tables = await query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = DATABASE() 
      ORDER BY table_name
    `);
    
    tables.forEach((table, index) => {
      console.log(`   ${index + 1}. ${table.table_name}`);
    });
    console.log('');

    // 2. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Бр╕Хр╣Ир╕ер╕░ table
    for (const table of tables) {
      const tableName = table.table_name;
      console.log(`2. р╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕З Table: ${tableName}`);
      
      // р╕Фр╕╣р╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕З columns
      const structure = await query(`DESCRIBE ${tableName}`);
      console.log('   Columns:');
      structure.forEach(col => {
        const key = col.Key ? ` (${col.Key})` : '';
        const nullStr = col.Null === 'NO' ? ' NOT NULL' : '';
        const defaultStr = col.Default ? ` DEFAULT ${col.Default}` : '';
        console.log(`     - ${col.Field}: ${col.Type}${nullStr}${defaultStr}${key}`);
      });
      
      // р╕Фр╕╣р╕Ир╕│р╕Щр╕зр╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е
      const countResult = await query(`SELECT COUNT(*) as count FROM ${tableName}`);
      const count = countResult[0].count;
      console.log(`   р╕Ир╕│р╕Щр╕зр╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е: ${count} р╕гр╕▓р╕вр╕Бр╕▓р╕г`);
      
      // р╕Фр╕╣р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕З (р╕Цр╣Йр╕▓р╕бр╕╡)
      if (count > 0) {
        const sampleData = await query(`SELECT * FROM ${tableName} LIMIT 3`);
        console.log('   р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕З:');
        sampleData.forEach((row, index) => {
          console.log(`     ${index + 1}. ${JSON.stringify(row, null, 2)}`);
        });
      }
      
      console.log('');
    }

    // 3. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Foreign Keys
    console.log('3. Foreign Keys:');
    const foreignKeys = await query(`
      SELECT 
        TABLE_NAME,
        COLUMN_NAME,
        CONSTRAINT_NAME,
        REFERENCED_TABLE_NAME,
        REFERENCED_COLUMN_NAME
      FROM information_schema.KEY_COLUMN_USAGE
      WHERE REFERENCED_TABLE_SCHEMA = DATABASE()
      AND REFERENCED_TABLE_NAME IS NOT NULL
      ORDER BY TABLE_NAME, COLUMN_NAME
    `);
    
    if (foreignKeys.length > 0) {
      foreignKeys.forEach(fk => {
        console.log(`   ${fk.TABLE_NAME}.${fk.COLUMN_NAME} -> ${fk.REFERENCED_TABLE_NAME}.${fk.REFERENCED_COLUMN_NAME}`);
      });
    } else {
      console.log('   р╣Др╕бр╣Ир╕бр╕╡ Foreign Keys');
    }
    console.log('');

    // 4. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Indexes
    console.log('4. Indexes:');
    const indexes = await query(`
      SELECT 
        TABLE_NAME,
        INDEX_NAME,
        COLUMN_NAME,
        NON_UNIQUE
      FROM information_schema.STATISTICS
      WHERE TABLE_SCHEMA = DATABASE()
      AND INDEX_NAME != 'PRIMARY'
      ORDER BY TABLE_NAME, INDEX_NAME, SEQ_IN_INDEX
    `);
    
    if (indexes.length > 0) {
      indexes.forEach(idx => {
        const unique = idx.NON_UNIQUE === 0 ? 'UNIQUE' : '';
        console.log(`   ${idx.TABLE_NAME}.${idx.INDEX_NAME} (${idx.COLUMN_NAME}) ${unique}`);
      });
    } else {
      console.log('   р╣Др╕бр╣Ир╕бр╕╡ Indexes р╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Хр╕┤р╕б');
    }
    console.log('');

    // 5. р╕кр╕гр╕╕р╕Ы
    console.log('5. р╕кр╕гр╕╕р╕Ы:');
    console.log(`   - р╕Ир╕│р╕Щр╕зр╕Щ Tables: ${tables.length}`);
    console.log(`   - р╕Ир╕│р╕Щр╕зр╕Щ Foreign Keys: ${foreignKeys.length}`);
    console.log(`   - р╕Ир╕│р╕Щр╕зр╕Щ Indexes: ${indexes.length}`);
    
    // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ tables р╕Чр╕╡р╣Ир╕кр╕│р╕Др╕▒р╕Н
    const importantTables = ['customers', 'products', 'installments', 'employees', 'checkers', 'branches'];
    console.log('\n   Tables р╕Чр╕╡р╣Ир╕кр╕│р╕Др╕▒р╕Н:');
    for (const tableName of importantTables) {
      const exists = tables.some(t => t.table_name === tableName);
      const status = exists ? 'тЬЕ р╕бр╕╡р╕нр╕вр╕╣р╣И' : 'тЭМ р╣Др╕бр╣Ир╕бр╕╡';
      console.log(`     ${tableName}: ${status}`);
    }

  } catch (error) {
    console.error('тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ:', error);
    console.error('Error details:', {
      message: error.message,
      code: error.code,
      sqlMessage: error.sqlMessage
    });
  }
}

// р╕гр╕▒р╕Щр╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ
checkMySQLTables()
  .then(() => {
    console.log('\nЁЯПБ р╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ');
    process.exit(0);
  })
  .catch((error) => {
    console.error('ЁЯТе р╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕ер╣Йр╕бр╣Ар╕лр╕ер╕з:', error);
    process.exit(1);
  }); 