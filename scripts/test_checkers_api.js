const { query } = require('../db/db');

async function testCheckersAPI() {
  try {
    console.log('ЁЯзк р╕Чр╕Фр╕кр╕нр╕Ъ API checkers...\n');
    
    // Test 1: Check if checkers table has data
    console.log('1. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕Щ checkers table...');
    const checkData = await query('SELECT COUNT(*) as count FROM checkers WHERE branch_id = 1');
    console.log(`тЬЕ р╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕е ${checkData[0].count} р╕гр╕▓р╕вр╕Бр╕▓р╕гр╣Гр╕Щр╕кр╕▓р╕Вр╕▓ 1`);
    
    if (checkData[0].count === 0) {
      console.log('тЪая╕П  р╣Др╕бр╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕Щ checkers table');
      console.log('ЁЯТб р╕гр╕▒р╕Щр╕Др╕│р╕кр╕▒р╣Ир╕З: heroku run node scripts/setup_database.js');
      return;
    }
    
    // Test 2: Simulate API query
    console.log('\n2. р╕Чр╕Фр╕кр╕нр╕Ъ API query...');
    const apiQuery = `
      SELECT 
        c.id,
        c.name,
        c.surname,
        c.full_name as fullName,
        c.phone,
        c.email,
        c.status,
        c.branch_id as branchId,
        c.created_at as createdAt,
        c.updated_at as updatedAt,
        b.name as branchName
      FROM checkers c
      LEFT JOIN branches b ON c.branch_id = b.id
      WHERE c.branch_id = 1
      ORDER BY c.created_at DESC
    `;
    
    const results = await query(apiQuery);
    console.log(`тЬЕ API query р╕кр╕│р╣Ар╕гр╣Зр╕И - р╣Др╕Фр╣Йр╕Вр╣Йр╕нр╕бр╕╣р╕е ${results.length} р╕гр╕▓р╕вр╕Бр╕▓р╕г`);
    
    // Test 3: Show sample data
    console.log('\n3. р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕З:');
    results.forEach((checker, index) => {
      console.log(`   ${index + 1}. ID: ${checker.id}`);
      console.log(`      р╕Кр╕╖р╣Ир╕н: ${checker.name}`);
      console.log(`      р╕Щр╕▓р╕бр╕кр╕Бр╕╕р╕е: ${checker.surname}`);
      console.log(`      р╕Кр╕╖р╣Ир╕нр╣Ар╕Хр╣Зр╕б: ${checker.fullName}`);
      console.log(`      р╣Ар╕Ър╕нр╕гр╣Мр╣Вр╕Чр╕г: ${checker.phone}`);
      console.log(`      р╕кр╕Цр╕▓р╕Щр╕░: ${checker.status}`);
      console.log(`      р╕кр╕▓р╕Вр╕▓: ${checker.branchName}`);
      console.log('');
    });
    
    // Test 4: Test search functionality
    console.log('4. р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Др╣Йр╕Щр╕лр╕▓...');
    const searchQuery = `
      SELECT 
        c.id,
        c.name,
        c.surname,
        c.full_name as fullName,
        c.phone,
        c.email,
        c.status,
        c.branch_id as branchId,
        c.created_at as createdAt,
        c.updated_at as updatedAt,
        b.name as branchName
      FROM checkers c
      LEFT JOIN branches b ON c.branch_id = b.id
      WHERE c.branch_id = 1
      AND (c.name LIKE '%р╕кр╕бр╕Кр╕▓р╕в%' OR c.surname LIKE '%р╕кр╕бр╕Кр╕▓р╕в%' OR c.full_name LIKE '%р╕кр╕бр╕Кр╕▓р╕в%')
      ORDER BY c.created_at DESC
    `;
    
    const searchResults = await query(searchQuery);
    console.log(`тЬЕ р╕Бр╕▓р╕гр╕Др╣Йр╕Щр╕лр╕▓ "р╕кр╕бр╕Кр╕▓р╕в" - р╣Др╕Фр╣Йр╕Вр╣Йр╕нр╕бр╕╣р╕е ${searchResults.length} р╕гр╕▓р╕вр╕Бр╕▓р╕г`);
    
    if (searchResults.length > 0) {
      searchResults.forEach((checker, index) => {
        console.log(`   ${index + 1}. ${checker.fullName} (${checker.phone})`);
      });
    }
    
    // Test 5: Simulate API response format
    console.log('\n5. р╕гр╕╣р╕Ыр╣Бр╕Ър╕Ъ API response:');
    const apiResponse = {
      success: true,
      data: results,
      count: results.length
    };
    
    console.log('тЬЕ API Response Format:');
    console.log(JSON.stringify(apiResponse, null, 2));
    
  } catch (error) {
    console.error('тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ:', error);
  }
}

// Run the function
testCheckersAPI()
  .then(() => {
    console.log('\nЁЯОЙ р╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\nтЭМ р╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╕ер╣Йр╕бр╣Ар╕лр╕ер╕з:', error);
    process.exit(1);
  }); 