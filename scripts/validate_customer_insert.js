const { query } = require('../db/db');

// Sample customer data from your error
const customerData = [
  {
    title: '‡∏ô‡∏≤‡∏¢',
    name: '‡∏ß‡∏™‡∏±‡∏ô‡∏ï‡πå',
    surname: '‡∏â‡∏¥‡∏°‡∏•‡∏∞‡∏°‡∏±‡∏¢',
    full_name: '‡∏ô‡∏≤‡∏¢‡∏ß‡∏™‡∏±‡∏ô‡∏ï‡πå ‡∏â‡∏¥‡∏°‡∏•‡∏∞‡∏°‡∏±‡∏¢',
    address: '6/1 ‡∏°.3 ‡∏ï.‡∏ó‡∏±‡∏ö‡∏™‡∏∞‡πÅ‡∏Å ‡∏≠.‡∏ó‡∏±‡∏ö‡∏™‡∏∞‡πÅ‡∏Å ‡∏à.‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå',
    id_card: '1770300044765',
    nickname: '‡∏Å‡∏±‡πâ‡∏á',
    phone: '0623406288',
    branch_id: 1,
    status: 'active',
    code: 'CUST087'
  },
  {
    title: '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß',
    name: '‡∏°‡∏•‡∏ó‡∏¥‡∏£‡∏≤',
    surname: '‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡πÅ‡∏Å‡πâ‡∏ß',
    full_name: '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏°‡∏•‡∏ó‡∏¥‡∏£‡∏≤ ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡πÅ‡∏Å‡πâ‡∏ß',
    address: '27 ‡∏°.12 ‡∏ï.‡∏£‡πà‡∏≠‡∏ô‡∏ó‡∏≠‡∏á ‡∏≠.‡∏ö‡∏≤‡∏á‡∏™‡∏∞‡∏û‡∏≤‡∏ô ‡∏à.‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå',
    id_card: '1770400199574',
    nickname: '‡∏à‡∏π‡∏ô',
    phone: '0623503950',
    branch_id: 1,
    status: 'active',
    code: 'CUST088'
  },
  {
    title: '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß',
    name: '‡∏£‡∏±‡∏ï‡∏ô‡∏≤',
    surname: '‡πÅ‡∏¢‡πâ‡∏°‡∏û‡∏£‡∏≤‡∏¢',
    full_name: '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏£‡∏±‡∏ï‡∏ô‡∏≤ ‡πÅ‡∏¢‡πâ‡∏°‡∏û‡∏£‡∏≤‡∏¢',
    address: '82/2 ‡∏°.6 ‡∏ï.‡∏ó‡∏±‡∏ö‡∏™‡∏∞‡πÅ‡∏Å ‡∏≠.‡∏ó‡∏±‡∏ö‡∏™‡∏∞‡πÅ‡∏Å ‡∏à.‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå',
    id_card: '3219900015480',
    nickname: '‡∏û‡∏µ‡πà‡∏£‡∏±‡∏ï‡∏ô‡πå',
    phone: '0926484894',
    branch_id: 1,
    status: 'active',
    code: 'CUST089'
  },
  {
    title: '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß',
    name: '‡πÄ‡∏°‡∏ó‡∏¥‡∏ô‡∏µ',
    surname: '‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡∏±‡∏í‡∏ô‡πå',
    full_name: '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡πÄ‡∏°‡∏ó‡∏¥‡∏ô‡∏µ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡∏±‡∏í‡∏ô‡πå',
    address: '56/6 ‡∏°.10 ‡∏ï.‡∏´‡πâ‡∏ß‡∏¢‡∏¢‡∏≤‡∏á ‡∏≠.‡∏ó‡∏±‡∏ö‡∏™‡∏∞‡πÅ‡∏Å ‡∏à.‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå',
    id_card: '1309701244538',
    nickname: '‡∏ô‡πâ‡∏≠‡∏á‡πÄ‡∏°‡∏¢‡πå',
    phone: '0930027499',
    branch_id: 1,
    status: 'active',
    code: 'CUST090'
  },
  {
    title: '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß',
    name: '‡∏™‡∏≤‡∏¢‡πÉ‡∏à',
    surname: '‡∏Ç‡∏≤‡∏ß‡∏™‡∏∞‡∏≠‡∏≤‡∏î',
    full_name: '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏™‡∏≤‡∏¢‡πÉ‡∏à ‡∏Ç‡∏≤‡∏ß‡∏™‡∏∞‡∏≠‡∏≤‡∏î',
    address: '123/45 ‡∏°.7 ‡∏ï.‡∏ö‡∏≤‡∏á‡∏™‡∏∞‡∏û‡∏≤‡∏ô ‡∏≠.‡∏ö‡∏≤‡∏á‡∏™‡∏∞‡∏û‡∏≤‡∏ô ‡∏à.‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå',
    id_card: null, // This is causing the error
    nickname: '‡∏™‡∏≤‡∏¢',
    phone: '0812345678',
    branch_id: 1,
    status: 'active',
    code: 'CUST091'
  }
];

async function validateAndFixCustomerData() {
  try {
    console.log('üîç Validating customer data...');
    
    const validCustomers = [];
    const invalidCustomers = [];
    
    for (let i = 0; i < customerData.length; i++) {
      const customer = customerData[i];
      
      // Check for required fields
      const issues = [];
      
      if (!customer.id_card || customer.id_card === null || customer.id_card === '') {
        issues.push('Missing id_card');
        // Generate a temporary id_card
        customer.id_card = `TEMP${Date.now()}${i}`;
      }
      
      if (!customer.code || customer.code === null || customer.code === '') {
        issues.push('Missing code');
      }
      
      if (!customer.name || customer.name === null || customer.name === '') {
        issues.push('Missing name');
      }
      
      if (!customer.full_name || customer.full_name === null || customer.full_name === '') {
        issues.push('Missing full_name');
      }
      
      if (issues.length > 0) {
        invalidCustomers.push({
          index: i,
          customer,
          issues
        });
      } else {
        validCustomers.push(customer);
      }
    }
    
    console.log(`‚úÖ Valid customers: ${validCustomers.length}`);
    console.log(`‚ùå Invalid customers: ${invalidCustomers.length}`);
    
    if (invalidCustomers.length > 0) {
      console.log('\nüìã Invalid customers:');
      invalidCustomers.forEach(item => {
        console.log(`  Customer ${item.index + 1}:`);
        console.log(`    Issues: ${item.issues.join(', ')}`);
        console.log(`    Name: ${item.customer.name} ${item.customer.surname}`);
        console.log(`    Code: ${item.customer.code}`);
        console.log(`    ID Card: ${item.customer.id_card}`);
        console.log('');
      });
    }
    
    // Generate corrected INSERT statement
    console.log('\nüìù Corrected INSERT statement:');
    console.log('-- Insert ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß)');
    console.log('INSERT INTO customers (');
    console.log('  title, name, surname, full_name, address, id_card, nickname, phone,');
    console.log('  branch_id, status, code, created_at, updated_at');
    console.log(') VALUES');
    
    const values = validCustomers.map(customer => {
      return `  ('${customer.title}', '${customer.name}', '${customer.surname}', '${customer.full_name}', '${customer.address}', '${customer.id_card}', '${customer.nickname}', '${customer.phone}', ${customer.branch_id}, '${customer.status}', '${customer.code}', NOW(), NOW())`;
    });
    
    console.log(values.join(',\n'));
    console.log(';');
    
    // Test insertion
    console.log('\nüß™ Testing insertion...');
    
    for (const customer of validCustomers) {
      try {
        const result = await query(`
          INSERT INTO customers (
            title, name, surname, full_name, address, id_card, nickname, phone,
            branch_id, status, code, created_at, updated_at
          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())
        `, [
          customer.title, customer.name, customer.surname, customer.full_name,
          customer.address, customer.id_card, customer.nickname, customer.phone,
          customer.branch_id, customer.status, customer.code
        ]);
        
        console.log(`‚úÖ Successfully inserted customer: ${customer.name} ${customer.surname} (ID: ${result.insertId})`);
      } catch (error) {
        console.error(`‚ùå Failed to insert customer ${customer.name} ${customer.surname}:`, error.message);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Error validating customer data:', error);
  } finally {
    process.exit(0);
  }
}

// Run the validation
validateAndFixCustomerData(); 